#!/bin/env zsh
#
# Build remastered Arch ISO.
#
# @author   TADOKORO Saneyuki <saneyan@mail.gfunction.com>
# @license  MIT License

#[ "$(whoami)" != "root" ] && echo "Root privilege required." && exit 1

declare _in= _out= _cookbook=
declare _generate=false
declare _squash=false
declare _update=false           # Update remastered ISO contents or not.
declare _auto=false             # Build remastered ISO by using Chef cookbooks automatically or not.
declare _arch=$(uname -m)       # The target architecture
declare _shell=/bin/zsh         # The default shell on chroot
declare -r _pool=/tmp/customiso # The pool path of custom ISO (Read-only)
declare -r _mntp=/mnt/archiso   # The mount point of Arch ISO (Read-only)
declare -r _afterz=/etc/zsh/after.zshrc
declare -r _defaultz=/etc/zsh/zshrc
declare -r _dirname=$(cd $(dirname $0)/../ && pwd)

[ ! -e $_dirname/.deploy.lock ] && echo "You must deploy the environment." && exit 1

source $_dirname/subsets/remaster-utils

while getopts i:o:c:s:ufgqa: opt; do
  case $opt in
    # The contents directory.
    i) _in=$OPTARG ;;
    # Remastered Arch ISO path.
    o) _out=$OPTARG ;;
    # Chef cookbooks' path.
    c) _cookbook=$OPTARG ;;
    # Shell in a chroot.
    s) _shell=$OPTARG ;;
    u) _update=true ;;
    f) _auto=true ;;
    g) _generate=true ;;
    q) _squash=true ;;
    # The target architecture. It must be x86_64 or i686 architecture.
    a)
      if [[ "$OPTARG" =~ "^(x86_64|i686)$" ]]; then
        _arch=$OPTARG
      else
        echo "Specify an architecture, 'x86_64' or 'i686'"
        return 1
      fi
      ;;
  esac
done

[[ -z $_in ]] && echo "The contents directory is required." && exit 1
[ _g = true ] && [[ -z $_out ]] && echo "Remastered ISO path is required." && exit 1

declare -r _rootfs=$_in/mnt

echo "Start building remastered Arch Linux..."
cd $_in/archive/arch/$_arch
sudo mkdir --verbose $_rootfs/remaster
sudo mount --verbose --rbind $_dirname $_rootfs/remaster

# These cookbooks must be included in ISO.
__ ":: Bundling cookbooks..."

if [[ -n $_cookbook ]]; then
  sudo mkdir --verbose $_rootfs/cookbooks
  sudo mount --verbose --rbind $_cookbook $_rootfs/cookbooks
else
  echo "No cookbooks specified."
fi

__ ":: Entering chroot..."

if [ $_auto = true ]; then
  [ -e $_rootfs$_defaultz ] && sudo mv --verbose $_rootfs$_defaultz $_rootfs$_afterz
  sudo cp --verbose $_dirname/chroot/bootstrap.zsh $_rootfs$_defaultz
  sudo DEFAULTZ=$_defaultz AFTERZ=$_afterz UPDATE=$_update ARCH=$_arch arch-chroot $_rootfs /bin/zsh
else
  echo "Let's customize your Arch Linux. Enjoy!"
  sudo arch-chroot $_rootfs $_shell
fi

if [[ -n $_cookbook ]]; then
  sudo umount $_rootfs/cookbooks
  sudo rm --recursive --verbose $_rootfs/cookbooks
fi

sudo umount $_rootfs/remaster
sudo rm --recursive --verbose $_rootfs/remaster

if [ $_squash = true ]; then
  __ ":: Making squashfs..."
  cp --verbose $_rootfs/boot/vmlinuz-linux $_in/arch/boot/$_arch/vmlinuz
  cp --verbose $_rootfs/boot/initramfs-linux.img $_in/arch/boot/$_arch/archiso.img
  sudo mv --verbose $_rootfs/pkglist.txt $_in/arch/pkglist.$_arch.txt

  sudo rm --verbose airootfs.sfs
  sudo mksquashfs $_in/squashfs-root airootfs.sfs

  __ ":: Updating files..."
  sudo md5sum airootfs.sfs > airootfs.md5
fi

if [ $_generate = true ]; then
  __ ":: Generating remastered Arch ISO..."
  genisoimage -r -l -J -V "ARCH_$(date +"%Y%m%d")"\
    -b isolinux/isolinux.bin\
    -c isolinux/boot.cat\
    -o $_out \
    -no-emul-boot -boot-load-size 4 -boot-info-table $_in/archive
fi

[ $? = 0 ] && echo "Done!"
